#-------------------------------------------------------------
# Greeting, motd etc. ...
#-------------------------------------------------------------

# Color definitions (taken from Color Bash Prompt HowTo).

# Normal Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[m"               # Color Reset


# Function to run upon exit of shell.
function _exit()
{
    echo -e "${BRed}Hasta la vista, baby${NC}"
}
trap _exit EXIT

#-------------------------------------------------------------
# Aliases
#-------------------------------------------------------------

alias which='type -a'
alias ..='cd ..'
alias mkdir='mkdir -p'
alias ll="ls -lv --group-directories-first"
alias la='ll -A'           #  Show hidden files.
alias tree='tree -Csuh'    #  Nice alternative to 'recursive ls' ...

# Pretty-print of some PATH variables:
alias path='echo -e ${PATH//:/\\n}'

# Spelling typos - highly personnal and keyboard-dependent
alias xs='cd'
alias vf='cd'
alias moer='more'
alias moew='more'
alias kk='ll'
alias sl='ls'

#-------------------------------------------------------------
# Process/system related functions:
#-------------------------------------------------------------

# Filter a process in ps without grep.
pps () { ps -ef | grep "$@" | grep -v 'grep'; }

# Kill application and show a funny message.
# fuck you <app>
function fuck() 
{
    killall -9 $2;
    if [ $? -eq 0 ]; then
        echo
        if [ "$(dpkg -l | grep toilet)" ]; then
            echo " (╯°□°）╯︵$(echo "$2" | toilet -f term -F rotate)"
        else
            echo " (╯°□°）╯︵$(echo "$2")"
        fi
        echo
    fi
}

# Get IP address on ethernet.
function my_ip()
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}

# Pretty-print of 'df' output.
function mydf()         
{           
    for fs ; do

        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}

# Get current host related info.
function ii() 
{
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; netstat -pan --inet;
    echo
}

# Finds directory sizes and lists them for the current directory or $1
function dirsize()
{   
    [ -n "$1" ] && path=$1 || path=.
    du -shx $path/* .[a-zA-Z0-9_]* 2> /dev/null | \
    egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
    egrep '^ *[0-9.]*M' /tmp/list
    egrep '^ *[0-9.]*G' /tmp/list
    rm -rf /tmp/list
}

#-------------------------------------------------------------
# Misc utilities:
#-------------------------------------------------------------

# Repeat n times command.
function repeat()
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}

# Ask [y/n] returning [0/1].
function ask() 
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

# Get name of app that created a corefile.
function corename()
{
    for file ; do
        echo -n $file : ; gdb --core=$file --batch | head -1
    done
}

# Flip table
fliptable() { echo "（╯°□°）╯︵ ┻━┻"; }

#-------------------------------------------------------------
# Aliases: 
#-------------------------------------------------------------

# To find candidates that might be good to create aliases for, it might be a good idea to search your history for your most commonly used commands. 
# history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10

#Typos
alias sl="ls --color"
#Listing
alias ll="ls -lhA --color"
#Change to your parent directory.
alias cd..="cd .."
alias ..="cd .."
#Find files in our current directory easily.
alias fhere="find . -name "
#Searches our process for an argument we'll pass wih headline.
alias psg="ps aux | grep -v grep | grep -i -e VSZ -e"
#This one will list our disk usage in human-readable units including filesystem type, and print a total at the bottom.
alias df="df -Tha --total"


#-------------------------------------------------------------
# Make the following commands run in background automatically:
#-------------------------------------------------------------

function firefox() { command firefox "$@" & }

#-------------------------------------------------------------
# File & strings related functions:
#-------------------------------------------------------------

# Swap 2 filenames around, if they exist (from Uzi's bashrc).
function swap()
{
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Create a directory and then immediately move into that directory.
mkcd () {
    [ $# -ne 1 ] && echo 'mkcd: 1 argument needed' && return 1
    mkdir -p $1
    cd $1
}

# This function takes the first argument and calls the appropriate utility program based on the file extension used.
extract () {
    if [ -z "$1" ]; then
        # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    else
        if [ -f "$1" ]; then
            #NAME=${1%.*}
            #mkdir $NAME && cd $NAME
            case "$1" in
                *.tar.bz2)   tar xvjf ./"$1"    ;;
                *.tar.gz)    tar xvzf ./"$1"    ;;
                *.tar.xz)    tar xvJf ./"$1"    ;;
                *.lzma)      unlzma ./"$1"      ;;
                *.bz2)       bunzip2 ./"$1"     ;;
                *.rar)       unrar x -ad ./"$1" ;;
                *.gz)        gunzip ./"$1"      ;;
                *.tar)       tar xvf ./"$1"     ;;
                *.tbz2)      tar xvjf ./"$1"    ;;
                *.tgz)       tar xvzf ./"$1"    ;;
                *.zip)       unzip ./"$1"       ;;
                *.Z)         uncompress ./"$1"  ;;
                *.7z)        7z x ./"$1"        ;;
                *.xz)        unxz ./"$1"        ;;
                *.exe)       cabextract ./"$1"  ;;
                *)           echo "extract: '$1' - unknown archive method" ;;
            esac
        else
            echo "'$1' - file does not exist"
        fi
    fi
}

# Find a file with a pattern in name in a given path.
function ff() { path=$1; shift; find $path -type f -iname '*'"$*"'*' -ls ; }

# Find a file in path $1 with pattern $2 in name and execute $3 on it:
function fe() { find $1 -type f -iname '*'"${2:-}"'*' -exec ${3:-file} {} \;  ; }



# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

# Extract a function code from a script.
function extract_function(){ sed -n "/^function $1\(\)/,/^}/p" $2; }

# Find all function names from a script.
function find_functions() { awk '/^function/ {$0=$2; sub(/\(\)/, "", $0); print $1}' $1; }
